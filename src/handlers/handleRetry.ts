import { InputFile } from "grammy/types"
import { supabase } from "../core/supabase"
import { pulse } from "../helpers"
import { generateImage } from "../helpers/generateImage"
import { MyContext } from "../utils/types"

export async function handleRetry(ctx: MyContext, isRu: boolean) {
  if (!ctx || !ctx.from) {
    await ctx.reply(isRu ? "–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" : "User identification error")
    return
  }

  await ctx.answerCallbackQuery()
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: lastPrompt } = await supabase
    .from("prompts_history")
    .select("*")
    .eq("telegram_id", ctx.from)
    .order("created_at", { ascending: false })
    .limit(1)
    .single()

  if (!lastPrompt) {
    await ctx.reply("–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    return
  }

  console.log("Generating image 3")
  const result = await generateImage(lastPrompt.prompt, lastPrompt.model_type, ctx.from.id.toString())
  console.log("result4", result)
  if (!result) {
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ–Ω–µ—Ä–∏—Ä–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  if (Buffer.isBuffer(result.image)) {
    await ctx.replyWithPhoto(new InputFile(result.image))
  } else {
    await ctx.replyWithPhoto(result.image)
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ pulse
  const pulseImage = Buffer.isBuffer(result.image) ? `data:image/jpeg;base64,${result.image.toString("base64")}` : result.image

  await pulse(ctx, pulseImage, lastPrompt.prompt, `/${lastPrompt.model_type}`)

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–æ–≤–∞
  await ctx.reply("–ß—Ç–æ –¥–∞–ª—å—à–µ?", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data: "retry" }],
        [{ text: "‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data: "improve" }],
        [{ text: "üé• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ", callback_data: "video" }],
      ],
    },
  })
}
