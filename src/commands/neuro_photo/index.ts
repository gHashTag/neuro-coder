import { generateNeuroImage } from "../../services/generateNeuroImage"

import { MyContext, MyConversation } from "../../utils/types"
import { supabase } from "../../core/supabase"
import { getUserBalance, imageNeuroGenerationCost, sendInsufficientStarsMessage, sendBalanceMessage } from "../../helpers/telegramStars/telegramStars"

interface UserModel {
  model_name: string
  trigger_word: string
  model_url: string
  model_key?: `${string}/${string}:${string}`
}

async function getLatestUserModel(userId: number): Promise<UserModel | null> {
  const { data, error } = await supabase
    .from("model_trainings")
    .select("model_name, trigger_word, model_url")
    .eq("user_id", userId)
    .eq("status", "completed")
    .order("created_at", { ascending: false })
    .limit(1)
    .single()
  console.log(data, "getLatestUserModel")
  if (error) {
    console.error("Error getting user model:", error)
    return null
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º model_key –∏–∑ model_url
  if (data && data.model_url) {
    return {
      ...data,
    }
  }

  return data as UserModel
}

export async function neuroPhotoConversation(conversation: MyConversation, ctx: MyContext) {
  console.log("CASE: neuroPhotoConversation")
  const isRu = ctx.from?.language_code === "ru"
  const userId = ctx.from?.id

  if (!userId) {
    await ctx.reply(isRu ? "‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" : "‚ùå User identification error")
    return
  }
  const currentBalance = await getUserBalance(userId)

  if (currentBalance < imageNeuroGenerationCost) {
    await sendInsufficientStarsMessage(ctx, isRu)
    return
  }
  await sendBalanceMessage(currentBalance, imageNeuroGenerationCost, ctx, isRu)

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userModel = await getLatestUserModel(userId)
    console.log(userModel, "userModel")
    if (!userModel || !userModel.model_url) {
      await ctx.reply(
        isRu
          ? "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–±—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /train_flux_model —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –º–æ–¥–µ–ª—å."
          : "‚ùå You don't have any trained models. Use /train_flux_model to create your model.",
      )
      return
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
    await ctx.reply(isRu ? `üì∏ –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å` : `üì∏Describe what kind of photo you want to generate.`, {
      reply_markup: {
        force_reply: true,
      },
    })

    const promptMsg = await conversation.wait()
    console.log(promptMsg, "promptMsg")
    const promptText = promptMsg.message?.text

    if (!promptText) {
      await ctx.reply(isRu ? "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç" : "‚ùå Invalid prompt")
      return
    }

    // –î–æ–±–∞–≤–ª—è–µ–º trigger word –∫ –ø—Ä–æ–º–ø—Ç—É
    const fullPrompt = `Fashionable ${userModel.trigger_word}, ${promptText}`

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await ctx.reply(isRu ? "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..." : "‚è≥ Generating image...")

    await generateNeuroImage(fullPrompt, userModel.model_url, userId, ctx, 1)
    return
  } catch (error) {
    console.error("Error in neuro_photo conversation:", error)
    await ctx.reply(isRu ? "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." : "‚ùå An error occurred. Please try again.")
    return
  }
}
