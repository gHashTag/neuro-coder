import { MyContext } from "../../utils/types"
import { Conversation } from "@grammyjs/conversations"
import { saveUserEmail } from "../../core/supabase/payments"
import { buyRobokassa } from "../../handlers/buy/buyRobokassa"

export async function buy(ctx: MyContext) {
  const isRu = ctx.from?.language_code === "ru"
  await ctx.reply(
    isRu
      ? `<b>ü§ë –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à E-mail.`
      : `<b>ü§ë Balance Top-Up</b>\nTo generate an invoice, please provide your E-mail.`,
    {
      reply_markup: {
        inline_keyboard: [[{ text: isRu ? "–û—Ç–ø—Ä–∞–≤–∏—Ç—å E-mail" : "Send E-mail", callback_data: "request_email" }]],
      },
      parse_mode: "HTML",
    },
  )
}

export async function emailCommand(conversation: Conversation<MyContext>, ctx: MyContext) {
  if (!ctx.from) {
    throw new Error("User not found")
  }
  const isRu = ctx.from?.language_code === "ru"

  await ctx.reply(isRu ? "üëâ –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à E-mail." : "üëâ To generate an invoice, please provide your E-mail.")
  const { message } = await conversation.waitFor("message:text")

  const email = message?.text
  if (email && email.includes("@")) {
    try {
      await saveUserEmail(ctx.from.id.toString(), email)
      await ctx.reply(
        isRu
          ? "–í–∞—à e-mail —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–ª–∞—Ç—É."
          : "Your e-mail has been successfully saved. You can now proceed with the payment.",
      )
      await buyRobokassa(ctx)
    } catch (error) {
      await ctx.reply(isRu ? "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ e-mail. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." : "Error saving e-mail. Please try again.")
    }
    return
  } else {
    await ctx.reply(isRu ? "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." : "Invalid e-mail. Please try again.")
    return
  }
}
