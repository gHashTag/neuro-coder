import { Conversation } from "@grammyjs/conversations"
import { InlineKeyboard } from "grammy"
import { MyContext } from "../../utils/types"

import { generateImage } from "../../services/generateReplicateImage"

import { getUserBalance, sendBalanceMessage, sendInsufficientStarsMessage, textToImageGenerationCost } from "../../helpers/telegramStars/telegramStars"

const textToImageCommand = async (conversation: Conversation<MyContext>, ctx: MyContext): Promise<void> => {
  const isRu = ctx.from?.language_code === "ru"
  if (!ctx || !ctx.from || !ctx.from.id || !ctx.chat?.id) {
    await ctx.reply(isRu ? "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞" : "‚ùå An error occurred")
    return
  }

  try {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    await ctx.reply(isRu ? "üé® –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:" : "üé® Choose generation model:", {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "Flux 1.1Pro Ultra",
              callback_data: "flux",
            },
            {
              text: "SDXL",
              callback_data: "sdxl",
            },
          ],
          [
            {
              text: "SD 3.5 Turbo",
              callback_data: "sd3",
            },
            {
              text: "Recraft v3",
              callback_data: "recraft",
            },
          ],
          [
            {
              text: "Photon",
              callback_data: "photon",
            },
          ],
          [
            {
              text: isRu ? "–û—Ç–º–µ–Ω–∞" : "Cancel",
              callback_data: "cancel",
            },
          ],
        ],
      },
    })

    // –ñ–¥–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    const modelResponse = await conversation.waitFor("callback_query:data")
    console.log(modelResponse, "modelResponse")
    if (modelResponse.callbackQuery.data === "cancel") {
      await ctx.reply(isRu ? "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞" : "Generation cancelled")
      return
    }
    const currentBalance = await getUserBalance(ctx.from.id)
    const price = textToImageGenerationCost
    if (currentBalance < price) {
      await sendInsufficientStarsMessage(ctx, isRu)
      return
    }

    await sendBalanceMessage(currentBalance, textToImageGenerationCost, ctx, isRu)
    const model_type = modelResponse.callbackQuery.data

    const keyboard = new InlineKeyboard().text(isRu ? "–û—Ç–º–µ–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é" : "Cancel generation", "cancel")

    const greetingMessage = await ctx.reply(
      isRu ? "üëã –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è." : "üëã Hello! Write a prompt in English to generate an image.",
      { reply_markup: keyboard },
    )

    const { message, callbackQuery } = await conversation.wait()
    if (callbackQuery?.data === "cancel") {
      await ctx.api.deleteMessage(ctx.chat?.id || "", greetingMessage.message_id)
      await ctx.reply(isRu ? "‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞" : "‚ùå Generation cancelled")
      return
    }

    if (!message || !ctx.from?.id) return

    const text = message.photo ? message.caption : message.text
    if (!text) {
      await generateImage(text || "", model_type || "", ctx.from.id, isRu, ctx)
      return
    } else {
      await ctx.reply(isRu ? "‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" : "‚ùå Prompt not found")
      return
    }
  } catch (error) {
    console.error("Error in generateImageConversation:", error)
    await ctx.reply(isRu ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${JSON.stringify(error)}` : `‚ùå An error occurred: ${JSON.stringify(error)}`)
  }
}

export { textToImageCommand }
