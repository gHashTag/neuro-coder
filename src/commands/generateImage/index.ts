import { MyContext } from "../../utils/types"
import { Conversation } from "@grammyjs/conversations"
import { InlineKeyboard } from "grammy"
import { getGeneratedImages } from "../../core/supabase/ai"
import { InputFile } from "grammy"
import { buttonHandlers } from "../../helpers/buttonHandlers"
import { generateImage } from "../../helpers/generateImage"
import { generateNeuroImage } from "src/helpers/generateNeuroImage"

export const generateMoreImagesButtons = async (ctx: MyContext, prompt_id: string | number | null) => {
  try {
    // –ï—Å–ª–∏ prompt_id —Ä–∞–≤–µ–Ω null, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    if (prompt_id === null) {
      return
    }

    const isRu = ctx.from?.language_code === "ru"

    await ctx.reply(isRu ? "–ß—Ç–æ –¥–∞–ª—å—à–µ?" : "What's next?", {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: isRu ? "üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë" : "üîÑ Generate more",
              callback_data: `generate_more_${prompt_id}`,
            },
          ],
          [
            {
              text: isRu ? "üé® –î—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å" : "üé® Different model",
              callback_data: "select_model",
            },
          ],
          [
            {
              text: isRu ? "‚ùå –û—Ç–º–µ–Ω–∞" : "‚ùå Cancel",
              callback_data: "cancel",
            },
          ],
        ],
      },
    })
  } catch (error) {
    console.error("Error in buttonHandlers:", error)
  }
}

const generateImageConversation = async (conversation: Conversation<MyContext>, ctx: MyContext): Promise<void> => {
  const isRu = ctx.from?.language_code === "ru"
  try {
    const keyboard = new InlineKeyboard().text(isRu ? "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é" : "‚ùå Cancel generation", "cancel")
    const model_type = ctx.message?.text?.slice(1)
    console.log(model_type)
    const greetingMessage = await ctx.reply(
      isRu
        ? "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫–æ–π-—Ç–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å, —Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é."
        : "üëã Hello! Write a prompt in English to generate an image. If you want to use a reference image, then attach it to the message.",
      {
        reply_markup: keyboard,
      },
    )
    const { message, callbackQuery } = await conversation.wait()
    const info = await getGeneratedImages(ctx.from?.id.toString() || "")
    const { count, limit } = info

    if (count >= limit) {
      await ctx.reply(
        isRu
          ? "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
          : "‚ö†Ô∏è You have no more uses left. Please pay for image generation.",
      )
      return
    }

    if (callbackQuery?.data === "cancel") {
      await ctx.api.deleteMessage(ctx.chat?.id || "", greetingMessage.message_id)
      await ctx.reply(isRu ? "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è." : "‚ùå You canceled image generation.")
      return
    }

    if (!message || !ctx.from?.id) return

    const text = message.photo ? message.caption : message.text
    let file

    if (message.document) {
      const referenceFileId = message.document.file_id
      file = await ctx.api.getFile(referenceFileId)
    }
    const fileUrl = message.document ? `https://api.telegram.org/file/bot${ctx.api.token}/${file.file_path}` : ""
    console.log(fileUrl)
    const generatingMessage = await ctx.reply(isRu ? "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è..." : "‚è≥ Generating...")
    if (!text) {
      throw new Error("Text is required")
    }
    if (!model_type) {
      throw new Error("Model type is required")
    }
    const result = await generateNeuroImage(text, model_type, ctx.from.id.toString())
    if (!result) {
      throw new Error("Failed to generate image")
    }

    const { image, prompt_id } = result

    if (!image) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    }

    await ctx.api.deleteMessage(ctx.chat?.id || "", generatingMessage.message_id)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const photoToSend = Buffer.isBuffer(image) ? new InputFile(image) : image
    await ctx.replyWithPhoto(photoToSend, {
      caption: isRu ? "üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!" : "üé® Image generated!",
    })

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    await buttonHandlers(ctx, prompt_id?.toString() || "")
  } catch (error) {
    console.error("Error in generateImageConversation:", error)
    await ctx.reply(isRu ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error}` : `‚ùå An error occurred: ${error}`)
  }
}

export { generateImageConversation }
