import { updateUserSoul } from "../../core/supabase"
import { Conversation } from "@grammyjs/conversations"
import { MyContext } from "../../utils/types"

export async function avatarConversation(conversation: Conversation<MyContext>, ctx: MyContext) {
  const lang = ctx.from?.language_code || "en"
  const messageIds: number[] = []

  //   await ctx.i18n.setLocale(lang);

  //   await ctx.reply(ctx.i18n.t("ask_work"));
  const nameMessage = await ctx.reply(lang === "ru" ? "üëã –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è?" : "üëã Hello, what is your company name?")
  const company = (await conversation.wait()).message
  if (!company || !company.text) {
    await ctx.reply(lang === "ru" ? "‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ" : "‚ùå Error: you did not provide all the required information")
    return
  }
  messageIds.push(nameMessage.message_id, company?.message_id)

  //   await ctx.reply(ctx.i18n.t("ask_position"));
  const positionMessage = await ctx.reply(lang === "ru" ? "üíº –ö–∞–∫–∞—è —É –≤–∞—Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å?" : "üíº What is your position?")
  const position = (await conversation.wait()).message
  if (!position || !position.text) {
    await ctx.reply(lang === "ru" ? "‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ" : "‚ùå Error: you did not provide all the required information")
    return
  }
  messageIds.push(positionMessage.message_id, position.message_id)

  //   await ctx.reply(ctx.i18n.t("ask_skills"));
  const skillsMessage = await ctx.reply(lang === "ru" ? "üõ†Ô∏è –ö–∞–∫–∏–µ —É —Ç–µ–±—è –Ω–∞–≤—ã–∫–∏?" : "üõ†Ô∏è What are your skills?")
  const designation = (await conversation.wait()).message
  if (!designation || !designation.text) {
    await ctx.reply(lang === "ru" ? "‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ" : "‚ùå Error: you did not provide all the required information")
    return
  }
  messageIds.push(skillsMessage.message_id, designation.message_id)

  const userId = ctx.from?.id
  if (userId) {
    if (!company.text || !position.text || !designation.text) {
      await ctx.reply(lang === "ru" ? "‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ" : "‚ùå Error: you did not provide all the required information")
      return
    }
    await updateUserSoul(userId.toString(), company.text, position.text, designation.text)
    const thankYouMessage = await ctx.reply(lang === "ru" ? "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é" : "üôè Thank you for providing the information")
    messageIds.push(thankYouMessage.message_id)

    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    await ctx.deleteMessages(messageIds)

    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await ctx.reply(
      lang === "ru"
        ? `‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: \n\n <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> \n ${company.text} \n\n <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> \n ${position.text} \n\n <b>–ù–∞–≤—ã–∫–∏:</b> \n ${designation.text}`
        : `‚úÖ Avatar has successfully received the information: \n\n <b>Company:</b> \n ${company.text} \n\n <b>Position:</b> \n ${position.text} \n\n <b>Skills:</b> \n ${designation.text}`,
      {
        parse_mode: "HTML",
      },
    )
  } else {
    await ctx.reply(lang === "ru" ? "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–≤–∞—Ç–∞—Ä—É" : "‚ùå Error: failed to send information to the avatar")
  }

  return
}
