import { Markup } from "telegraf"
import { MyContext } from "../../interfaces"

import { getAvailableModels } from "./getAvailableModels"

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
const selectModelCommand = async (ctx: MyContext) => {
  const isRu = ctx.from?.language_code === "ru"

  try {
    const models = await getAvailableModels()

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏, –ø–æ 2 –≤ —Ä—è–¥
    const buttons: ReturnType<typeof Markup.button.callback>[][] = []
    for (let i = 0; i < models.length; i += 2) {
      const row: ReturnType<typeof Markup.button.callback>[] = []
      if (models[i]) {
        row.push(Markup.button.callback(models[i], `select_model_${models[i]}`))
      }
      if (models[i + 1]) {
        row.push(Markup.button.callback(models[i + 1], `select_model_${models[i + 1]}`))
      }
      buttons.push(row)
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –ò–ò
    buttons.unshift([Markup.button.callback(isRu ? "üß† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò" : "üß† Select AI Model", "select_model")])

    const keyboard = Markup.inlineKeyboard(buttons)

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", keyboard)

    return
  } catch (error) {
    console.error("Error creating model selection menu:", error)
    await ctx.reply(isRu ? "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π" : "‚ùå Error fetching models list")
  }
}

export { selectModelCommand }
