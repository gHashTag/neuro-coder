import { Composer, InlineKeyboard } from "grammy"
import { MyContext } from "../../utils/types"
import OpenAI from "openai"
import { handleModelCallback } from "../../handlers/handleModelCallback"

const composer = new Composer<MyContext>()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
async function getAvailableModels(): Promise<string[]> {
  try {
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    })

    const models = await openai.models.list()

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ GPT –º–æ–¥–µ–ª–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
    return models.data
      .filter((model) => model.id.includes("gpt") && !model.id.includes("instruct") && !model.id.includes("0613") && !model.id.includes("0301"))
      .map((model) => model.id)
      .sort()
  } catch (error) {
    console.error("Error fetching models:", error)
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    return ["gpt-4", "gpt-4-turbo", "gpt-3.5-turbo"]
  }
}

composer.command("select_model", async (ctx) => {
  const isRu = ctx.from?.language_code === "ru"

  try {
    const models = await getAvailableModels()
    const keyboard = new InlineKeyboard()

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏, –ø–æ 2 –≤ —Ä—è–¥
    for (let i = 0; i < models.length; i += 2) {
      if (models[i]) {
        keyboard.text(models[i], `model_${models[i]}`)
      }
      if (models[i + 1]) {
        keyboard.text(models[i + 1], `model_${models[i + 1]}`)
      }
      keyboard.row()
    }

    await ctx.reply(
      isRu
        ? "üß† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò\n\n–ú–æ–¥–µ–ª—å –ò–ò ‚Äî —ç—Ç–æ –∫–∞–∫ –º–æ–∑–≥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –µ–º—É –ø–æ–Ω–∏–º–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –ª—É—á—à–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:"
        : "üß† Select AI Model\n\nAn AI model is like a computer's brain that helps it understand and perform tasks. Choose one of the available models so the bot can better handle your requests. Available models:",
      { reply_markup: keyboard },
    )
  } catch (error) {
    console.error("Error creating model selection menu:", error)
    await ctx.reply(isRu ? "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π" : "‚ùå Error fetching models list")
  }
})

composer.callbackQuery(/^model_/, async (ctx) => {
  const model = ctx.callbackQuery.data.replace("model_", "")
  await handleModelCallback(model, ctx)
})

export default composer
