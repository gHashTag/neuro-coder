require("dotenv").config()
import { Bot, Composer, Context, session } from "grammy"
import { development, production } from "./utils/launch"
import { hydrateFiles } from "@grammyjs/files"
import { conversations, createConversation } from "@grammyjs/conversations"

import { getUserData } from "./core/supabase/ai"
import { freeStorage } from "@grammyjs/storage-free"
import { answerAi } from "./core/openai/requests"
import { getUid, getUserModel } from "./core/supabase"
import { handleCallbackQuery } from "./handlers"
import bot from "./core/bot"
import { isRussian } from "./utils/language"
import { incrementBalance, starCost } from "./helpers/telegramStars/telegramStars"
import { adapter, MyContext, MyContextWithSession, SessionData } from "./utils/types"
import { autoRetry } from "@grammyjs/auto-retry"

import {
  leela,
  clipmaker,
  balance,
  neuroQuest,
  start,
  imageSizeConversation,
  textToSpeech,
  voiceConversation,
  generateImageConversation,
  createTriggerReel,
  captionForReels,
  get100Conversation,
  avatarConversation,
  lipSyncConversation,
  createBackgroundVideo,
  subtitles,
  createAinews,
  textToImageConversation,
  textToVideoConversation,
  imageToPrompt,
  trainFluxModelConversation,
  neuroPhotoConversation,
  emailConversation,
  priceConversation,
  selectModel,
  inviterConversation,
  imageToVideoConversation,
} from "./commands"
import { subscriptionMiddleware } from "./middleware/subscription"

import { chatMembers } from "@grammyjs/chat-members"
import { createMainMenu } from "./menu"
import { setBotCommands } from "setCommands"

bot.api.config.use(hydrateFiles(bot.token))
bot.api.config.use(autoRetry())

// Set bot commands
setBotCommands(bot as Bot<MyContext>)

console.log(`Starting bot in ${process.env.NODE_ENV} mode`)

if (process.env.NODE_ENV === "development") {
  development(bot).catch(console.error)
} else {
  // –í production —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
  production(bot).catch(console.error)
}

const composer = new Composer<MyContext>()

function initial(): SessionData {
  return { melimi00: { videos: [], texts: [] }, text: "" }
}

bot.use(session({ initial, storage: freeStorage<SessionData>(bot.token) }))

bot.use(conversations<MyContextWithSession>())
bot.use(createConversation(inviterConversation))

bot.use(chatMembers(adapter))
bot.use(subscriptionMiddleware)

bot.use(createConversation(start))
bot.use(createConversation(neuroQuest))
bot.use(createConversation(imageSizeConversation))
bot.use(createConversation(textToSpeech))
bot.use(createConversation(generateImageConversation))
bot.use(createConversation(createTriggerReel))
bot.use(createConversation(captionForReels))
bot.use(createConversation(priceConversation))
bot.use(createConversation(get100Conversation))
bot.use(createConversation(avatarConversation))
bot.use(createConversation(lipSyncConversation))
bot.use(createConversation(createBackgroundVideo))
bot.use(createConversation(subtitles))
bot.use(createConversation(createAinews))
bot.use(createConversation(textToImageConversation))
bot.use(createConversation(textToVideoConversation))
bot.use(createConversation(imageToPrompt))
bot.use(createConversation(trainFluxModelConversation))
bot.use(createConversation(neuroPhotoConversation))
bot.use(createConversation(emailConversation))
bot.use(createConversation(selectModel))
bot.use(createConversation(voiceConversation))
bot.use(createConversation(imageToVideoConversation))

composer.command("invite", async (ctx) => {
  console.log("CASE: start")
  await ctx.conversation.enter("inviterConversation")
  return
})

bot.command("menu", async (ctx) => {
  const isRu = ctx.from?.language_code === "ru"
  const mainMenu = createMainMenu(isRu)
  await ctx.reply(isRu ? "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá" : "üè† Main menu\nChoose the section üëá", { reply_markup: mainMenu })
  return
})

composer.command("start", async (ctx) => {
  console.log("CASE: start")
  await ctx.conversation.enter("start")
  return
})

composer.command("clipmaker", (ctx: MyContext) => clipmaker(ctx))

composer.command("leela", (ctx: MyContext) => leela(ctx))

composer.command("caption_for_reels", async (ctx) => {
  await ctx.conversation.enter("captionForReels")
  return
})

composer.command("neuro_quest", async (ctx) => {
  await ctx.conversation.enter("neuroQuest")
  return
})

composer.command("price", async (ctx) => {
  await ctx.conversation.enter("priceConversation")
  return
})

composer.command("lipsync", async (ctx) => {
  await ctx.conversation.enter("lipSyncConversation")
  return
})

composer.command("b_roll", async (ctx) => {
  await ctx.conversation.enter("createBackgroundVideo")
  return
})

composer.command("text_to_speech", async (ctx) => {
  await ctx.conversation.enter("textToSpeech")
  return
})

composer.command("imagesize", async (ctx) => {
  await ctx.conversation.enter("imageSizeConversation")
  return
})

composer.command("playom", async (ctx) => {
  await ctx.conversation.enter("generateImageConversation")
  return
})

composer.command("buy", async (ctx) => {
  await ctx.conversation.enter("emailConversation")
  return
})

composer.command("balance", balance)

composer.command("trigger_reel", async (ctx) => {
  await ctx.conversation.enter("createTriggerReel")
  return
})

composer.command("soul", async (ctx) => {
  await ctx.conversation.enter("soulConversation")
  return
})

composer.command("voice", async (ctx) => {
  console.log("CASE: voice")
  await ctx.conversation.enter("voiceConversation")
  return
})

composer.command("get100", async (ctx) => {
  await ctx.conversation.enter("get100Conversation")
  return
})

composer.command("text_to_image", async (ctx) => {
  await ctx.conversation.enter("textToImageConversation")
  return
})

composer.command("text_to_video", async (ctx) => {
  await ctx.conversation.enter("textToVideoConversation")
  return
})

composer.command("caption_for_ai_news", async (ctx) => {
  await ctx.conversation.enter("createCaptionForNews")
  return
})

composer.command("train_flux_model", async (ctx) => {
  await ctx.conversation.enter("trainFluxModelConversation")
  return
})

composer.command("image_to_video", async (ctx) => {
  await ctx.conversation.enter("imageToVideoConversation")
  return
})

composer.command("neuro_photo", async (ctx) => {
  await ctx.conversation.enter("neuroPhotoConversation")
  return
})

composer.command("help", async (ctx) => {
  await ctx.conversation.enter("helpConversation")
  return
})

composer.command("avatar", async (ctx) => {
  await ctx.conversation.enter("avatarConversation")
  return
})

composer.command("text_to_image", async (ctx) => {
  await ctx.conversation.enter("textToImageConversation")
  return
})

composer.command("image_to_prompt", async (ctx) => {
  await ctx.conversation.enter("imageToPrompt")
  return
})

composer.command("select_model", async (ctx) => {
  await ctx.conversation.enter("selectModel")
  return
})

bot.use(composer)

composer.hears(["üåü –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", "üåü Create Avatar"], async (ctx) => {
  await ctx.reply(ctx.from?.language_code === "ru" ? "–í—ã –≤—ã–±—Ä–∞–ª–∏: –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä" : "You selected: Create Avatar")
})

composer.hears(["üåü –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò", "üåü Select AI Model"], async (ctx) => {
  await ctx.reply(ctx.from?.language_code === "ru" ? "–í—ã –≤—ã–±—Ä–∞–ª–∏: –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò" : "You selected: Select AI Model")
})

composer.hears(["üé® –û–±—É—á–∏—Ç—å FLUX", "üé® Train FLUX"], async (ctx) => {
  await ctx.reply(ctx.from?.language_code === "ru" ? "–í—ã –≤—ã–±—Ä–∞–ª–∏: –û–±—É—á–∏—Ç—å FLUX" : "You selected: Train FLUX")
})

composer.hears(["üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ", "üì∏ NeuroPhoto"], async (ctx) => {
  await ctx.reply(ctx.from?.language_code === "ru" ? "–í—ã –≤—ã–±—Ä–∞–ª–∏: –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ" : "You selected: NeuroPhoto")
})

composer.hears(["üé• –í–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞", "üé• Text to Video"], async (ctx) => {
  await ctx.reply(ctx.from?.language_code === "ru" ? "–í—ã –≤—ã–±—Ä–∞–ª–∏: –í–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞" : "You selected: Text to Video")
})

composer.hears(["üé• –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ–æ", "üé• Image to Video"], async (ctx) => {
  await ctx.reply(ctx.from?.language_code === "ru" ? "–í—ã –≤—ã–±—Ä–∞–ª–∏: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ–æ" : "You selected: Image to Video")
})

composer.hears(["üîä –¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å", "üîä Text to Speech"], async (ctx) => {
  await ctx.reply(ctx.from?.language_code === "ru" ? "–í—ã –≤—ã–±—Ä–∞–ª–∏: –¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å" : "You selected: Text to Speech")
})

composer.hears(["üé§ –ì–æ–ª–æ—Å –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞", "üé§ Voice for Avatar"], async (ctx) => {
  await ctx.reply(ctx.from?.language_code === "ru" ? "–í—ã –≤—ã–±—Ä–∞–ª–∏: –ì–æ–ª–æ—Å –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞" : "You selected: Voice for Avatar")
})

composer.hears(["üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞", "üñºÔ∏è Text to Image"], async (ctx) => {
  await ctx.reply(ctx.from?.language_code === "ru" ? "–í—ã –≤—ã–±—Ä–∞–ª–∏: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞" : "You selected: Text to Image")
})

composer.hears(["üîç –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "üîç Image to Prompt"], async (ctx) => {
  await ctx.reply(ctx.from?.language_code === "ru" ? "–í—ã –≤—ã–±—Ä–∞–ª–∏: –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" : "You selected: Image to Prompt")
})

composer.hears(["üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", "üë• Invite a friend"], async (ctx) => {
  await ctx.reply(ctx.from?.language_code === "ru" ? "–í—ã –≤—ã–±—Ä–∞–ª–∏: –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞" : "You selected: Invite a friend")
})

composer.hears(["‚ùì –ü–æ–º–æ—â—å", "‚ùì Help"], async (ctx) => {
  await ctx.reply(ctx.from?.language_code === "ru" ? "–í—ã –≤—ã–±—Ä–∞–ª–∏: –ü–æ–º–æ—â—å" : "You selected: Help")
})

bot.on("pre_checkout_query", async (ctx) => {
  await ctx.answerPreCheckoutQuery(true)
  return
})

bot.on("message:successful_payment", async (ctx) => {
  if (!ctx.chat) {
    console.error("Update does not belong to a chat")
    return
  }
  const isRu = isRussian(ctx)
  console.log("ctx 646(succesful_payment)", ctx)

  // –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç
  const stars = ctx.message.successful_payment.total_amount

  if (!ctx.from?.id) throw new Error("No telegram id")
  const user_id = await getUid(ctx.from.id.toString())
  if (!user_id) throw new Error("No user_id")

  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
  await incrementBalance({ telegram_id: ctx.from.id.toString(), amount: stars })

  await ctx.reply(
    isRu
      ? `üí´ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${stars} –∑–≤–µ–∑–¥! (–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–≤–µ–∑–¥—ã: $${starCost})`
      : `üí´ Your balance has been replenished by ${stars} stars! (Cost per star: $${starCost})`,
  )
  await ctx.api.sendMessage(
    "-1001978334539",
    `üí´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ctx.from.username} (ID: ${ctx.from.id}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ ${stars} –∑–≤–µ–∑–¥! (–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–≤–µ–∑–¥—ã: $${starCost})`,
  )
  return
})

bot.on("message:text", async (ctx) => {
  if (ctx.message.text.startsWith("/")) {
    console.log("SKIP")
    return
  }

  // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ GPT
  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userModel = await getUserModel(ctx.from?.id.toString() || "")
    const userData = await getUserData(ctx.from?.id.toString() || "")

    if (!userData) {
      await ctx.reply(ctx.from?.language_code === "ru" ? "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" : "Failed to get user data")
      return
    }

    const response = await answerAi(userModel, userData, ctx.message.text, ctx.from?.language_code || "en")

    if (!response) {
      await ctx.reply(
        ctx.from?.language_code === "ru"
          ? "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
          : "Failed to get response from GPT. Please try again later.",
      )
      return
    }

    await ctx.reply(response)
    return
  } catch (error) {
    console.error("Error in GPT response:", error)
    await ctx.reply(ctx.from?.language_code === "ru" ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞" : "An error occurred while processing your request")
  }
})

bot.on("callback_query:data", async (ctx) => {
  console.log("CASE: callback_query:data")
  const isRu = isRussian(ctx)

  try {
    const data = ctx.callbackQuery.data
    await ctx.answerCallbackQuery().catch((e) => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query:", e))

    await handleCallbackQuery(ctx, data, isRu)
    return
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query:", error)
    try {
      await ctx.answerCallbackQuery()
      return
    } catch (e) {
      console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query:", e)
      await ctx.reply(isRu ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." : "An error occurred. Please try again later.")
      return
    }
  }
})

bot.catch((err) => {
  const ctx = err.ctx
  const isRu = ctx.from?.language_code === "ru"
  console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`)
  console.error("error", err.error)
  ctx
    .reply(
      isRu
        ? "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        : "Sorry, an error occurred while processing your request. Please try again later.",
    )
    .catch((e) => {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ—å–∑–æ–≤–∞—Ç–µ–ª—é:", e)
    })
})

export { bot }
