require("dotenv").config()

import commands from "./commands"
import { development, production } from "./utils/launch"
import { hydrateFiles } from "@grammyjs/files"
import { conversations, createConversation } from "@grammyjs/conversations"
import { session } from "grammy"
import { imageSizeConversation } from "./commands/imagesize"
import { customMiddleware } from "./helpers"
import { generateImageConversation } from "./commands/generateImageConversation"
import createTriggerReel from "./commands/trigger_reel"
import createCaptionForNews from "./commands/—ÅaptionForNews"
import { get100Conversation } from "./commands/get100"
import { soulConversation } from "./commands/soul"
import { voiceConversation } from "./commands/voice"
import { incrementLimit, setModel } from "./core/supabase/ai"

import { invite } from "./commands/invite"

import { answerAi } from "./core/openai/requests"
import textToSpeech from "./commands/textToSpeech"
import { lipSyncConversation } from "./commands/lipSyncConversation"
import { createBackgroundVideo } from "./commands/createBackgroundVideo"
import { start } from "./commands/start"
import leeSolarNumerolog from "./commands/lee_solar_numerolog"
import leeSolarBroker from "./commands/lee_solar_broker"
import { subtitles } from "./commands/subtitles"
import { sendPaymentInfo } from "./core/supabase/payments"
import { getUid, getUserModel } from "./core/supabase"
import createAinews from "./commands/ainews"
import { textToImageConversation } from "./commands/text_to_image"

import { textToVideoConversation } from "./commands/text_to_video"
import imageToVideo from "./commands/image_to_video"
import { imageToPromptConversation } from "./commands/image_to_prompt"
import { trainFluxModelConversation } from "./commands/train_flux_model"
import { neuroPhotoConversation } from "./commands/neuro_photo"
import { sequentialize } from "@grammyjs/runner"
import neuroQuest from "./commands/neuro_quest"

import { handleAspectRatioChange, handleBuy, handleChangeSize } from "./handlers"

import bot from "./core/bot"

import { isRussian } from "./utils/language"
import { handleGenerateImproved } from "./handlers/handleGenerateImproved"
import { handleGenerate } from "./handlers/handleGenerate"
import { handleImprove } from "./handlers/handleImprove"
import { handleGenerateImage } from "./handlers/handleGenerateImage"
import { handleRetry } from "./handlers/handleRetry"
import { handleNeuroGenerate } from "./handlers/handleNeuroGenerate"
import { handleNeuroImprove } from "./handlers/handleNeuroImprove"
import { handleNeuroGenerateImproved } from "./handlers/handleNeuroGenerateImproved"
import { handleNeuroVideo } from "./handlers/handleNeuroVideo"

bot.api.config.use(hydrateFiles(bot.token))

bot.use(session({ initial: () => ({}) }))

console.log(`Starting bot in ${process.env.NODE_ENV} mode`)

// –í production —Ä–µ–∂–∏–º–µ –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º bot.start() –∏ runner
if (process.env.NODE_ENV === "development") {
  development(bot).catch(console.error)
} else {
  // –í production —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
  production(bot).catch(console.error)
}

// –£–±–∏—Ä–∞–µ–º runner –≤ production
if (process.env.NODE_ENV === "development") {
  // –î–æ–±–∞–≤–ª—è–µ–º sequentialize middleware —Ç–æ–ª—å–∫–æ –≤ development
  bot.use(
    sequentialize((ctx) => {
      const chat = ctx.chat?.id.toString()
      const user = ctx.from?.id.toString()
      return [chat, user].filter((con): con is string => con !== undefined)
    }),
  )
}

if (process.env.NODE_ENV === "production") {
  bot.api.setMyCommands([
    {
      command: "start",
      description: "üëã Start bot / –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
    },
    {
      command: "help",
      description: "‚ùì Help / –ü–æ–º–æ—â—å",
    },
    {
      command: "buy",
      description: "üí∞ Buy a subscription / –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
    },
    {
      command: "select_model",
      description: "ü§ñ Select model / –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å",
    },
    {
      command: "invite",
      description: "üë• Invite a friend / –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞",
    },
    {
      command: "avatar",
      description: "üë§ Tell about yourself / –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ",
    },
    {
      command: "voice",
      description: "üé§ Add voice to avatar / –î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä—É –≥–æ–ª–æ—Å",
    },
    {
      command: "text_to_speech",
      description: "üé§ Convert text to speech / –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å",
    },
    {
      command: "lipsync",
      description: "üé• Lipsync / –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—É–±",
    },
    {
      command: "b_roll",
      description: "üé• Create B-roll / –°–æ–∑–¥–∞—Ç—å B-roll",
    },
    {
      command: "subtitles",
      description: "üé• Create subtitles / –°–æ–∑–¥–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã",
    },
    {
      command: "ainews",
      description: "üì∞ Create AI news caption / –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ AI –Ω–æ–≤–æ—Å—Ç–∏",
    },
    {
      command: "text_to_image",
      description: "üé® Generate image from text / –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞",
    },
    {
      command: "text_to_video",
      description: "üé• Generate video from text / –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞",
    },
    {
      command: "caption_for_ai_news",
      description: "üìù Create AI news caption / –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è AI –Ω–æ–≤–æ—Å—Ç–µ–π",
    },
    {
      command: "image_to_video",
      description: "üé• Generate video from image / –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    },
    {
      command: "image_to_prompt",
      description: "üîç Generate prompt from image / –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    },
    {
      command: "train_flux_model",
      description: "üé® Train FLUX model / –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å FLUX",
    },
    {
      command: "invite",
      description: "üë• Invite a friend / –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞",
    },
    {
      command: "train_flux_model",
      description: "üé® Train FLUX model / –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å FLUX",
    },
    {
      command: "neuro_photo",
      description: "ü§ñ Generate your photos / –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Ñ–æ—Ç–æ",
    },
  ])
}

bot.use(conversations())
bot.use(createConversation(imageSizeConversation))
bot.use(createConversation(textToSpeech))
bot.use(createConversation(generateImageConversation))
bot.use(createConversation(createTriggerReel))
bot.use(createConversation(createCaptionForNews))
bot.use(createConversation(get100Conversation))
bot.use(createConversation(soulConversation))
bot.use(createConversation(voiceConversation))
bot.command("invite", invite)
bot.use(createConversation(lipSyncConversation))
bot.use(createConversation(createBackgroundVideo))
bot.use(createConversation(leeSolarNumerolog))
bot.use(createConversation(leeSolarBroker))
bot.use(createConversation(subtitles))
bot.use(createConversation(createAinews))
bot.use(createConversation(textToImageConversation))
bot.use(createConversation(textToVideoConversation))
bot.use(createConversation(imageToVideo))
bot.use(createConversation(imageToPromptConversation))
bot.use(createConversation(trainFluxModelConversation))
bot.use(createConversation(neuroPhotoConversation))
bot.use(createConversation(neuroQuest))

bot.command("start", async (ctx) => {
  await start(ctx)
})

bot.use(customMiddleware)
bot.use(commands)

bot.on("pre_checkout_query", (ctx) => {
  ctx.answerPreCheckoutQuery(true)
  return
})

bot.on("message:successful_payment", async (ctx) => {
  // const lang = ctx.from?.language_code === "ru"
  console.log("ctx 646(succesful_payment)", ctx)
  const level = ctx.message.successful_payment.invoice_payload
  if (level === "avatar") {
    await incrementLimit({ telegram_id: ctx.from?.id.toString() || "", amount: 400 })
  }
  if (!ctx.from?.id) throw new Error("No telegram id")
  const user_id = await getUid(ctx.from.id.toString())
  if (!user_id) throw new Error("No user_id")
  await sendPaymentInfo(user_id, level)
  // const levelForMessage =
  //   level === "start"
  //     ? lang
  //       ? "–ù–µ–π—Ä–æ–°—Ç–∞—Ä—Ç"
  //       : "NeuroStart"
  //     : level === "base"
  //     ? lang
  //       ? "–ù–µ–π—Ä–æ–ë–∞–∑–∞"
  //       : "NeuroBase"
  //     : level === "student"
  //     ? lang
  //       ? "–ù–µ–π—Ä–æ–£—á–µ–Ω–∏–∫"
  //       : "NeuroStudent"
  //     : lang
  //     ? "–ù–µ–π—Ä–æ–≠–∫—Å–ø–µ—Ä—Ç"
  //     : "NeuroExpert"
  // await ctx.reply(lang ? "ü§ù –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∫—É–ø–∫—É!" : "ü§ù Thank you for the purchase!")
  // const textToPost = lang
  //   ? `ü™ô @${ctx.from.username} —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É —É—Ä–æ–≤–Ω—è ${levelForMessage}!`
  //   : `ü™ô @${ctx.from.username} thank you for the purchase level ${levelForMessage}!`
  // await ctx.api.sendMessage(mediaChatId(lang), textToPost)
  return
})

bot.on("message:text", async (ctx) => {
  // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  if (ctx.message.text.startsWith("/")) {
    return
  }

  // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ GPT
  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userModel = await getUserModel(ctx.from?.id.toString() || "")

    const response = await answerAi(userModel, ctx.message.text, ctx.from?.language_code || "en")

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ null
    if (!response) {
      await ctx.reply(
        ctx.from?.language_code === "ru"
          ? "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
          : "Failed to get response from GPT. Please try again later.",
      )
      return
    }

    await ctx.reply(response)
  } catch (error) {
    console.error("Error in GPT response:", error)
    await ctx.reply(ctx.from?.language_code === "ru" ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞" : "An error occurred while processing your request")
  }
})

bot.on("callback_query:data", async (ctx) => {
  const isRu = isRussian(ctx)

  try {
    const data = ctx.callbackQuery.data
    await ctx.answerCallbackQuery().catch((e) => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query:", e))

    if (data === "change_size") {
      await handleChangeSize({ ctx })
      return
    }

    if (data.startsWith("size_")) {
      await handleAspectRatioChange({ ctx })
      return
    }

    if (data.startsWith("buy")) {
      await handleBuy({ ctx, data, isRu })
      return
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    if (data.startsWith("select_model_")) {
      const model = data.replace("select_model_", "")
      await setModel(ctx.from.id.toString(), model)
      return
    }

    if (data.startsWith("generate_improved_")) {
      console.log("generate_improved_", data)
      await handleGenerateImproved(ctx, data, isRu)
      return
    } else if (data.startsWith("generate_")) {
      console.log("generate_", data)
      await handleGenerate(ctx, data, isRu)
      return
    } else if (data.startsWith("improve_")) {
      console.log("improve_", data)
      await handleImprove(ctx, data, isRu)
      return
    } else if (data.startsWith("generate_image_")) {
      console.log("generate_image_", data)
      await handleGenerateImage(ctx, data, isRu)
      return
    }

    if (data === "retry") {
      await handleRetry(ctx, isRu)
      return
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–µ–π—Ä–æ-–∫–Ω–æ–ø–æ–∫
    if (data.startsWith("neuro_generate_")) {
      await handleNeuroGenerate(ctx, data, isRu)
      return
    } else if (data.startsWith("neuro_improve_")) {
      await handleNeuroImprove(ctx, data, isRu)
      return
    } else if (data.startsWith("neuro_generate_improved_")) {
      await handleNeuroGenerateImproved(ctx, data, isRu)
      return
    } else if (data === "neuro_cancel") {
      await ctx.reply(isRu ? "‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞" : "‚ùå Generation cancelled")
    } else if (data.startsWith("neuro_video_")) {
      await handleNeuroVideo(ctx, data, isRu)
      return
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query:", error)
    try {
      await ctx.answerCallbackQuery()
    } catch (e) {
      console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query:", e)
    }
    await ctx.reply(isRu ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." : "An error occurred. Please try again later.")
  }
})

bot.catch((err) => {
  const ctx = err.ctx
  const isRu = ctx.from?.language_code === "ru"
  console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`)
  console.error("error", err.error)
  ctx
    .reply(
      isRu
        ? "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∑—à–ª–∞ –æ—à–±–∫–∞ —Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        : "Sorry, an error occurred while processing your request. Please try again later.",
    )
    .catch((e) => {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ—å–∑–æ–≤–∞—Ç–µ–ª—é:", e)
    })
})

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–µ–º –∫–æ–º–∞–Ω–¥—É
bot.command("text_to_image", async (ctx) => {
  await ctx.conversation.enter("textToImageConversation")
})

bot.command("image_to_prompt", async (ctx) => {
  await ctx.conversation.enter("imageToPromptConversation")
})

bot.command("train_flux_model", async (ctx) => {
  await ctx.conversation.enter("trainFluxModelConversation")
})

export { bot }
