require("dotenv").config()

import { Bot } from "grammy"
import commands from "./commands"
import { development, production } from "./utils/launch"
import { MyContext } from "./utils/types"
import { hydrateFiles } from "@grammyjs/files"
import { conversations, createConversation } from "@grammyjs/conversations"
import { session, SessionFlavor } from "grammy"
import { imageSizeConversation } from "./commands/imagesize"
import { customMiddleware, pulse, upgradePrompt } from "./helpers"
import { generateImageConversation } from "./commands/generateImage"
import createTriggerReel from "./commands/trigger_reel"
import createCaptionForNews from "./commands/—ÅaptionForNews"
import { get100AnfiVesnaConversation } from "./commands/get100"
import { soulConversation } from "./commands/soul"
import { voiceConversation } from "./commands/voice"
import { getModel, getPrompt, incrementLimit, setModel } from "./core/supabase/ai"
import { InputFile } from "grammy/types"
import { inviterConversation } from "./commands/inviter"

import { answerAi } from "./core/openai/requests"
import textToSpeech from "./commands/textToSpeech"
import { lipSyncConversation } from "./commands/lipSyncConversation"
import { createBackgroundVideo } from "./commands/createBackgroundVideo"
import { start } from "./commands/start"
import leeSolarNumerolog from "./commands/lee_solar_numerolog"
import leeSolarBroker from "./commands/lee_solar_broker"
import { subtitles } from "./commands/subtitles"
import { checkSubscriptionByTelegramId, isLimitAi, sendPaymentInfo } from "./core/supabase/payments"
import { getUid, supabase } from "./core/supabase"
import createAinews from "./commands/ainews"
import { buttonHandlers } from "./helpers/buttonHandlers"
import { textToImageConversation } from "./commands/text_to_image"
import { generateImage } from "./helpers/generateImage"
import { textToVideoConversation } from "./commands/text_to_video"
import imageToVideo from "./commands/image_to_video"
import image_to_video from "./commands/image_to_video"
import { imageToPromptConversation } from "./commands/image_to_prompt"

interface SessionData {
  melimi00: {
    videos: string[]
    texts: string[]
  }
}

type MyContextWithSession = MyContext & SessionFlavor<SessionData>

const bot = new Bot<MyContextWithSession>(process.env.BOT_TOKEN || "")

bot.api.config.use(hydrateFiles(bot.token))

bot.use(session({ initial: () => ({}) }))

console.log(process.env.NODE_ENV, "process.env.NODE_ENV")
process.env.NODE_ENV === "development" ? development(bot) : production(bot)

if (process.env.NODE_ENV === "production") {
  bot.api.setMyCommands([
    {
      command: "start",
      description: "üëã Start bot / –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
    },
    {
      command: "help",
      description: "‚ùì Help / –ü–æ–º–æ—â—å",
    },
    {
      command: "buy",
      description: "üí∞ Buy a subscription / –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
    },
    {
      command: "model",
      description: "ü§ñ Change model / –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å",
    },
    {
      command: "invite",
      description: "üë• Invite a friend / –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞",
    },
    {
      command: "imagesize",
      description: "üñºÔ∏è Change image size / –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    },
    {
      command: "avatar",
      description: "üë§ Tell about yourself / –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ",
    },
    {
      command: "voice",
      description: "üé§ Add voice to avatar / –î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä—É –≥–æ–ª–æ—Å",
    },
    {
      command: "text_to_speech",
      description: "üé§ Convert text to speech / –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å",
    },
    {
      command: "lipsync",
      description: "üé• Lipsync / –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—É–±",
    },
    {
      command: "b_roll",
      description: "üé• Create B-roll / –°–æ–∑–¥–∞—Ç—å B-roll",
    },
    {
      command: "subtitles",
      description: "üé• Create subtitles / –°–æ–∑–¥–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã",
    },
    {
      command: "ainews",
      description: "üì∞ Create AI news caption / –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ AI –Ω–æ–≤–æ—Å—Ç–∏",
    },
    {
      command: "text_to_image",
      description: "üé® Generate image from text / –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞",
    },
    {
      command: "text_to_video",
      description: "üé• Generate video from text / –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞",
    },
    {
      command: "caption_for_ai_news",
      description: "üìù Create AI news caption / –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è AI –Ω–æ–≤–æ—Å—Ç–µ–π",
    },
    {
      command: "image_to_video",
      description: "üé• Generate video from image / –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    },
    {
      command: "image_to_prompt",
      description: "üîç Generate prompt from image / –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    },
  ])
}

bot.use(conversations())
bot.use(createConversation(imageSizeConversation))
bot.use(createConversation(textToSpeech))
bot.use(createConversation(generateImageConversation))
bot.use(createConversation(createTriggerReel))
bot.use(createConversation(createCaptionForNews))
bot.use(createConversation(get100AnfiVesnaConversation))
bot.use(createConversation(soulConversation))
bot.use(createConversation(voiceConversation))
bot.use(createConversation(inviterConversation))
bot.use(createConversation(lipSyncConversation))
bot.use(createConversation(createBackgroundVideo))
bot.use(createConversation(leeSolarNumerolog))
bot.use(createConversation(leeSolarBroker))
bot.use(createConversation(subtitles))
bot.use(createConversation(createAinews))
bot.use(createConversation(textToImageConversation))
bot.use(createConversation(textToVideoConversation))
bot.use(createConversation<MyContextWithSession>(imageToVideo))
bot.use(createConversation(imageToPromptConversation))

bot.command("start", start)
bot.use(customMiddleware)
bot.use(commands)

bot.on("pre_checkout_query", (ctx) => {
  ctx.answerPreCheckoutQuery(true)
  return
})

bot.on("message:successful_payment", async (ctx) => {
  // const lang = ctx.from?.language_code === "ru"
  console.log("ctx 646(succesful_payment)", ctx)
  const level = ctx.message.successful_payment.invoice_payload
  if (level === "avatar") {
    await incrementLimit({ telegram_id: ctx.from?.id.toString() || "", amount: 400 })
  }
  if (!ctx.from?.id) throw new Error("No telegram id")
  const user_id = await getUid(ctx.from.id.toString())
  if (!user_id) throw new Error("No user_id")
  await sendPaymentInfo(user_id, level)
  // const levelForMessage =
  //   level === "start"
  //     ? lang
  //       ? "–ù–µ–π—Ä–æ–°—Ç–∞—Ä—Ç"
  //       : "NeuroStart"
  //     : level === "base"
  //     ? lang
  //       ? "–ù–µ–π—Ä–æ–ë–∞–∑–∞"
  //       : "NeuroBase"
  //     : level === "student"
  //     ? lang
  //       ? "–ù–µ–π—Ä–æ–£—á–µ–Ω–∏–∫"
  //       : "NeuroStudent"
  //     : lang
  //     ? "–ù–µ–π—Ä–æ–≠–∫—Å–ø–µ—Ä—Ç"
  //     : "NeuroExpert"
  // await ctx.reply(lang ? "ü§ù –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!" : "ü§ù Thank you for the purchase!")
  // const textToPost = lang
  //   ? `ü™ô @${ctx.from.username} —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É —É—Ä–æ–≤–Ω—è ${levelForMessage}!`
  //   : `ü™ô @${ctx.from.username} thank you for the purchase level ${levelForMessage}!`
  // await ctx.api.sendMessage(mediaChatId(lang), textToPost)
  return
})

bot.on("message:text", async (ctx) => {
  console.log("Received message:", ctx.message?.text)
  if (ctx.message?.text?.startsWith("/")) {
    console.log("Skipping command message")
    return
  }

  if (ctx.message.text) {
    const isRu = ctx.from?.language_code === "ru"
    const model = await getModel(ctx.from?.id.toString() || "")
    const subscription = await checkSubscriptionByTelegramId(ctx.from?.id.toString() || "")
    if (subscription === "unsubscribed") {
      const isLimit = await isLimitAi(ctx.from.id.toString())
      if (isLimit) {
        await ctx.reply(
          isRu
            ? "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ üß†. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. \n\n/buy - –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∏ –æ—Ñ–æ—Ä–º–ª—è–π –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ªÔøΩÔøΩ–∏—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ üß†"
            : "üîí You are not subscribed to any level. The subscription is inactive. \n\n/buy - select a level and subscribe, to get unlimited access to the neural network üß†",
        )
        return
      }
    }
    const answer = await answerAi(model, ctx.message.text, ctx.from?.language_code || "en")
    if (!answer) {
      await ctx.reply("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æÔøΩÔøΩ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂ÔøΩÔøΩ.")
      return
    }
    await ctx.reply(answer)
  }
})

bot.on("callback_query:data", async (ctx) => {
  const isRu = ctx.from?.language_code === "ru"

  try {
    const data = ctx.callbackQuery.data
    await ctx.answerCallbackQuery().catch((e) => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query:", e))

    if (data.startsWith("buy")) {
      if (data.endsWith("avatar")) {
        await ctx.replyWithInvoice(
          isRu ? "–¶–∏—Ñ—Ä–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä" : "Digital avatar",
          isRu
            ? "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–æ–ø–∏—é —Å–µ–±—è! –Ø –º–æ–≥—É –æ–±—É—á–∏—Ç—å –ò–ò –Ω–∞ –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö, —á—Ç–æ–±—ã –≤—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–≥–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤–∞—à–∏–º –ª–∏—Ü–æ–º –∏ —Ç–µ–ª–æ–º –≤ –ª—é–±–æ–º –æ–±—Ä–∞–∑–µ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ ‚Äî –æ—Ç —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏—Ö –º–∏—Ä–æ–≤ –¥–æ –º–æ–¥–Ω—ã—Ö —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–π. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è!"
            : "Imagine you have the opportunity to create a unique digital copy of yourself! I can train the AI on your photos so that you can receive images with your face and body in any style and setting ‚Äî from fantastic worlds to fashion photo sessions. This is a great opportunity for a personal brand or just for fun!",
          "avatar",
          "XTR",
          [{ label: "–¶–µ–Ω–∞", amount: 5645 }],
        )
        return
      }
      if (data.endsWith("start")) {
        await ctx.replyWithInvoice(
          isRu ? "–ù–µ–π—Ä–æ–°—Ç–∞—Ä—Ç" : "NeuroStart",
          isRu ? "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω—è '–ù–µ–π—Ä–æ–°—Ç–∞—Ä—Ç'" : "You will receive a subscription to the 'NeuroStart' level",
          "start",
          "XTR",
          [{ label: "–¶–µ–Ω–∞", amount: 55 }],
        )
        return
      }
      if (data.endsWith("base")) {
        await ctx.replyWithInvoice(
          isRu ? "–ù–µ–π—Ä–æ–ë–∞–∑–∞" : "NeuroBase",
          isRu ? "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω—è '–ù–µÔøΩÔøΩ—Ä–æ–ë–∞–∑–∞'" : "You will receive a subscription to the 'NeuroBase' level",
          "base",
          "XTR",
          [{ label: "–¶–µ–Ω–∞", amount: 565 }],
        )
        return
      }
      if (data.endsWith("student")) {
        await ctx.replyWithInvoice(
          isRu ? "–ù–µ–π—Ä–æ–£—á–µ–Ω–∏–∫" : "NeuroStudent",
          isRu ? "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω—è '–ù–µ–π—Ä–æ–£—á–µ–Ω–∏–∫'" : "You will receive a subscription to the 'NeuroStudent' level",
          "student",
          "XTR",
          [{ label: "–¶–µ–Ω–∞", amount: 5655 }],
        )
        return
      }
      if (data.endsWith("expert")) {
        await ctx.replyWithInvoice(
          isRu ? "–ù–µ–π—Ä–æ–≠–∫—Å–ø–µ—Ä—Ç" : "NeuroExpert",
          isRu ? "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω—è '–ù–µ–π—Ä–æ–≠–∫—Å–ø–µ—Ä—Ç'" : "You will receive a subscription to the 'NeuroExpert' level",
          "expert",
          "XTR",
          [{ label: "–¶–µ–Ω–∞", amount: 16955 }],
        )
        return
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    if (data.startsWith("select_model_")) {
      const model = data.replace("select_model_", "")
      await setModel(ctx.from.id.toString(), model)
      return // –í—ã—Ö–æÔøΩÔøΩ–∏–º, —Ç–∞–∫ –∫–∞–∫ –¥–∞–ª—å–Ω–µ–π—à–∏–π –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –≤ conversation
    }
    if (data.startsWith("generate_improved_")) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
      const promptId = data.split("_")[2]
      const promptData = await getPrompt(promptId)
      if (!promptData) {
        await ctx.reply(isRu ? "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–ø—Ç–µ" : "Could not find prompt information")
        await ctx.answerCallbackQuery()
        return
      }

      await ctx.reply(isRu ? "‚è≥ –ù–∞—á–∏–Ω–∞—é —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞..." : "‚è≥ Starting prompt improvement...")

      // –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç
      const improvedPrompt = await upgradePrompt(promptData.prompt)
      if (!improvedPrompt) {
        await ctx.reply(isRu ? "–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç" : "Failed to improve prompt")
        return
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const { data: savedPrompt, error } = await supabase
        .from("prompts_history")
        .insert({
          prompt: improvedPrompt,
          model_type: promptData.model_type,
          telegram_id: ctx.from.id.toString(),
          improved_from: promptId,
        })
        .select()
        .single()

      if (error || !savedPrompt) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ ÔøΩÔøΩ—Ä–æ–º–ø—Ç–∞:", error)
        await ctx.reply(isRu ? "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞" : "Error saving improved prompt")
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞:", error)
        await ctx.reply(isRu ? "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æÔøΩÔøΩ–æ –ø—Ä–æ–º–ø—Ç–∞" : "Error saving improved prompt")
        return
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await ctx.reply(isRu ? `–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n${improvedPrompt}\n\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?` : `Improved prompt:\n${improvedPrompt}\n\nGenerate image?`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: isRu ? "‚úÖ –î–∞" : "‚úÖ Yes", callback_data: `generate_improved_${savedPrompt.prompt_id}` }],
            [{ text: isRu ? "‚ùå –ù–µ—Ç" : "‚ùå No", callback_data: "cancel" }],
          ],
        },
      })
    } else if (data.startsWith("generate_")) {
      // –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query –≤ –Ω–∞—á–∞–ª–µ
      await ctx.answerCallbackQuery().catch((e) => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query:", e))

      const [_, count, promptId] = data.split("_")
      const promptData = await getPrompt(promptId)
      if (!promptData) {
        await ctx.reply(isRu ? "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–ø—Ç–µ" : "Could not find prompt information")
        return
      }

      const generatingMessage = await ctx.reply(isRu ? "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è..." : "‚è≥ Generating...")

      try {
        const numImages = parseInt(count)
        for (let i = 0; i < numImages; i++) {
          const result = await generateImage(promptData.prompt, promptData.model_type, ctx.from.id.toString())
          if (!result) {
            await ctx.reply(isRu ? "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" : "Error generating image")
            continue
          }

          const photoToSend = Buffer.isBuffer(result.image) ? new InputFile(result.image) : result.image
          await ctx.replyWithPhoto(photoToSend)
          await ctx.reply(isRu ? `‚è≥ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${i + 1} –∏–∑ ${numImages}...` : `‚è≥ Generated ${i + 1} of ${numImages}...`)

          const pulseImage = Buffer.isBuffer(result.image) ? `data:image/jpeg;base64,${result.image.toString("base64")}` : result.image
          await pulse(ctx, pulseImage, promptData.prompt, `/${promptData.model_type}`)
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", error)
        await ctx.reply(isRu ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." : "An error occurred during generation. Please try again later.")
      } finally {
        buttonHandlers(ctx, promptId)
        await ctx.api
          .deleteMessage(ctx.chat?.id || "", generatingMessage.message_id)
          .catch((e) => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", e))
      }
    } else if (data.startsWith("improve_")) {
      await ctx.answerCallbackQuery().catch((e) => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query:", e))

      const promptId = data.split("_")[1]
      const promptData = await getPrompt(promptId)

      if (!promptData) {
        await ctx.reply(isRu ? "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–ø—Ç–µ" : "Could not find prompt information")
        return
      }

      await ctx.reply(isRu ? "‚è≥ –ù–∞—á–∏–Ω–∞—é —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞..." : "‚è≥ Starting prompt improvement...")

      try {
        const improvedPrompt = await upgradePrompt(promptData.prompt)
        if (!improvedPrompt) {
          await ctx.reply(isRu ? "–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç" : "Failed to improve prompt")
          return
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        const { data: savedPrompt, error } = await supabase
          .from("prompts_history")
          .insert({
            prompt: improvedPrompt,
            model_type: promptData.model_type,
            telegram_id: ctx.from.id.toString(),
            improved_from: promptId,
          })
          .select()
          .single()

        if (error || !savedPrompt) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞:", error)
          await ctx.reply(isRu ? "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞" : "Error saving improved prompt")
          return
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await ctx.reply(
          isRu ? `–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n${improvedPrompt}\n\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?` : `Improved prompt:\n${improvedPrompt}\n\nGenerate image?`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: isRu ? "‚úÖ –î–∞" : "‚úÖ Yes", callback_data: `generate_1_${savedPrompt.prompt_id}` }],
                [{ text: isRu ? "‚ùå –ù–µ—Ç" : "‚ùå No", callback_data: "cancel" }],
              ],
            },
          },
        )
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –ø—Ä–º–ø—Ç–∞:", error)
        await ctx.reply(isRu ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞" : "An error occurred while improving the prompt")
      }
    } else if (data.startsWith("generate_image_")) {
      const prompt = data.replace("generate_image_", "")

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const generatingMsg = await ctx.reply(isRu ? "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..." : "‚è≥ Generating image...")

      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é generateImage
        const result = await generateImage(prompt, "sdxl", ctx.from.id.toString())

        if (!result) {
          throw new Error("Failed to generate image")
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const photoToSend = Buffer.isBuffer(result.image) ? new InputFile(result.image) : result.image

        await ctx.replyWithPhoto(photoToSend)

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ pulse
        const pulseImage = Buffer.isBuffer(result.image) ? `data:image/jpeg;base64,${result.image.toString("base64")}` : result.image

        await pulse(ctx, pulseImage, prompt, "/sdxl")

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        await ctx.reply(isRu ? "–ß—Ç–æ –¥–∞–ª—å—à–µ?" : "What's next?", {
          reply_markup: {
            inline_keyboard: [
              [{ text: isRu ? "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é" : "üîÑ Regenerate", callback_data: "retry" }],
              [{ text: isRu ? "‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç" : "‚¨ÜÔ∏è Improve prompt", callback_data: "improve" }],
              [{ text: isRu ? "üé• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ" : "üé• Generate video", callback_data: "video" }],
            ],
          },
        })
      } catch (error) {
        console.error("Error generating image:", error)
        await ctx.reply(
          isRu
            ? "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            : "‚ùå An error occurred while generating the image. Please try again later.",
        )
      } finally {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await ctx.api.deleteMessage(ctx.chat?.id || "", generatingMsg.message_id).catch(console.error)
      }
      return
    }

    if (data === "retry") {
      await ctx.answerCallbackQuery()
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: lastPrompt } = await supabase
        .from("prompts_history")
        .select("*")
        .eq("telegram_id", ctx.from)
        .order("created_at", { ascending: false })
        .limit(1)
        .single()

      if (!lastPrompt) {
        await ctx.reply("–ù–µ –ΩÔøΩÔøΩ–π–¥–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        return
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ –ø—Ä–æ–º–ø—Ç–æ–º
      const result = await generateImage(lastPrompt.prompt, lastPrompt.model_type, ctx.from.id.toString())
      console.log("result4", result)
      if (!result) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      if (Buffer.isBuffer(result.image)) {
        await ctx.replyWithPhoto(new InputFile(result.image))
      } else {
        await ctx.replyWithPhoto(result.image)
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ pulse
      const pulseImage = Buffer.isBuffer(result.image) ? `data:image/jpeg;base64,${result.image.toString("base64")}` : result.image

      await pulse(ctx, pulseImage, lastPrompt.prompt, `/${lastPrompt.model_type}`)

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–æ–≤–∞
      await ctx.reply("–ß—Ç–æ –¥–∞–ª—å—à–µ?", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data: "retry" }],
            [{ text: "‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data: "improve" }],
            [{ text: "üé• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ", callback_data: "video" }],
          ],
        },
      })
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query:", error)
    try {
      await ctx.answerCallbackQuery()
    } catch (e) {
      console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query:", e)
    }
    await ctx.reply(isRu ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." : "An error occurred. Please try again later.")
  } finally {
    const loadingMessage = await ctx.reply(isRu ? "‚è≥ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π..." : "‚è≥ Starting image generation...")

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    await ctx.api.deleteMessage(ctx.chat?.id || "", loadingMessage.message_id).catch(console.error) // –∏ÔøΩÔøΩ–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
  }
})

bot.catch((err) => {
  const ctx = err.ctx
  const isRu = ctx.from?.language_code === "ru"
  console.error(`–û—à–∏–±–∫–∞ –ø–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`)
  console.error("error", err.error)
  ctx
    .reply(
      isRu
        ? "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∏–∑ÔøΩÔøΩ—à–ª–∞ –æ—à–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        : "Sorry, an error occurred while processing your request. Please try again later.",
    )
    .catch((e) => {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", e)
    })
})

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
bot.command("text_to_image", async (ctx) => {
  await ctx.conversation.enter("textToImageConversation")
})

bot.command("image_to_prompt", async (ctx) => {
  await ctx.conversation.enter("imageToPromptConversation")
})

export { bot }
