import { SessionFlavor, Context, InlineKeyboard } from "grammy"
import { createUser } from "../core/supabase"
import { ChatMembersFlavor } from "@grammyjs/chat-members"
import { MyContext, SessionData } from "../utils/types"

import { ConversationFlavor } from "@grammyjs/conversations"
import { bot } from "../index"

// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export type MyContextChatMembers = Context & SessionFlavor<SessionData> & ConversationFlavor & ChatMembersFlavor

export type MyContextWithSession = MyContext & SessionFlavor<SessionData>
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º chat-members
async function checkSubscription(ctx: MyContextChatMembers): Promise<boolean> {
  try {
    console.log("ctx.chat?.id", ctx.chat?.id)
    const chatMember = await bot.api.getChatMember("@neuro_coder_group", ctx.from?.id || 0)
    console.log("chatMember", chatMember)
    return ["member", "administrator", "creator"].includes(chatMember.status)
  } catch (error) {
    console.error("Error checking subscription:", error)
    return true
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π middleware
export const subscriptionMiddleware = async (ctx: MyContextChatMembers, next: () => Promise<void>) => {
  try {
    const username = ctx.from?.username || ""
    const telegram_id = ctx.from?.id
    const isRu = ctx.from?.language_code === "ru"

    if (!telegram_id) {
      console.error("No telegram_id found in context")
      return await ctx.reply(isRu ? "–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" : "User identification error")
    }

    const isSubscribed = await checkSubscription(ctx)
    if (!isSubscribed) {
      return await ctx.reply(
        isRu
          ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞. üòä"
          : "Please subscribe to our channel to continue using the bot. üòä",
        {
          reply_markup: new InlineKeyboard().url(isRu ? "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" : "Subscribe", "https://t.me/neuro_coder_group"),
        },
      )
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, —Å–æ–∑–¥–∞–µ–º/–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    await createUser({ username, telegram_id: telegram_id.toString() })

    // –ò –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É middleware
    return await next()
  } catch (error) {
    console.error("Critical error in subscriptionMiddleware:", error)
    const isRu = ctx.from?.language_code === "ru"
    return await ctx.reply(isRu ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." : "A critical error occurred. Please try again later.")
  }
}
