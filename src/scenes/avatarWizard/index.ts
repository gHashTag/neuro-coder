import { Scenes } from "telegraf"
import { MyContext } from "../../interfaces"
import { updateUserSoul } from "../../core/supabase"
import { isRussian } from "utils/language"

interface WizardSessionData extends Scenes.WizardSessionData {
  company?: string
  position?: string
}

export const avatarWizard = new Scenes.WizardScene<MyContext>(
  "avatarWizard",
  async (ctx) => {
    const isRu = isRussian(ctx)
    await ctx.reply(isRu ? "üëã –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è?" : "üëã Hello, what is your company name?")
    return ctx.wizard.next()
  },
  async (ctx) => {
    if (ctx.message && "text" in ctx.message) {
      ;(ctx.wizard.state as WizardSessionData).company = ctx.message.text
      await ctx.reply(ctx.from?.language_code === "ru" ? "üíº –ö–∞–∫–∞—è —É –≤–∞—Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å?" : "üíº What is your position?")
      return ctx.wizard.next()
    }
    await ctx.reply(
      ctx.from?.language_code === "ru" ? "‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ" : "‚ùå Error: you did not provide all the required information",
    )
    return ctx.scene.leave()
  },
  async (ctx) => {
    if (ctx.message && "text" in ctx.message) {
      ;(ctx.wizard.state as WizardSessionData).position = ctx.message.text
      await ctx.reply(ctx.from?.language_code === "ru" ? "üõ†Ô∏è –ö–∞–∫–∏–µ —É —Ç–µ–±—è –Ω–∞–≤—ã–∫–∏?" : "üõ†Ô∏è What are your skills?")
      return ctx.wizard.next()
    }
    await ctx.reply(
      ctx.from?.language_code === "ru" ? "‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ" : "‚ùå Error: you did not provide all the required information",
    )
    return ctx.scene.leave()
  },
  async (ctx) => {
    if (ctx.message && "text" in ctx.message) {
      const isRu = isRussian(ctx)
      const skills = ctx.message.text
      const { company, position } = ctx.wizard.state as WizardSessionData
      const userId = ctx.from?.id
      if (userId && company && position) {
        await updateUserSoul(userId.toString(), company, position, skills)
        await ctx.reply(
          isRu
            ? `‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: \n\n <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> \n ${company} \n\n <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> \n ${position} \n\n <b>–ù–∞–≤—ã–∫–∏:</b> \n ${skills}`
            : `‚úÖ Avatar has successfully received the information: \n\n <b>Company:</b> \n ${company} \n\n <b>Position:</b> \n ${position} \n\n <b>Skills:</b> \n ${skills}`,
          {
            parse_mode: "HTML",
          },
        )
      } else {
        const isRu = isRussian(ctx)
        await ctx.reply(isRu ? "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–≤–∞—Ç–∞—Ä—É" : "‚ùå Error: failed to send information to the avatar")
      }
    }
    return ctx.scene.leave()
  },
)

export default avatarWizard
